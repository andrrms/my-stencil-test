/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AppMain {
    }
}
export interface AppMainCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppMainElement;
}
declare global {
    interface HTMLAppMainElementEventMap {
        "themeChanged": { theme: 'light' | 'dark' | 'system' };
    }
    interface HTMLAppMainElement extends Components.AppMain, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppMainElementEventMap>(type: K, listener: (this: HTMLAppMainElement, ev: AppMainCustomEvent<HTMLAppMainElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppMainElementEventMap>(type: K, listener: (this: HTMLAppMainElement, ev: AppMainCustomEvent<HTMLAppMainElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppMainElement: {
        prototype: HTMLAppMainElement;
        new (): HTMLAppMainElement;
    };
    interface HTMLElementTagNameMap {
        "app-main": HTMLAppMainElement;
    }
}
declare namespace LocalJSX {
    interface AppMain {
        "onThemeChanged"?: (event: AppMainCustomEvent<{ theme: 'light' | 'dark' | 'system' }>) => void;
    }
    interface IntrinsicElements {
        "app-main": AppMain;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-main": LocalJSX.AppMain & JSXBase.HTMLAttributes<HTMLAppMainElement>;
        }
    }
}
